import os
import json

from datetime import date

from telegram import Bot
from ydb_session import YDBSession

from dadata_address_suggester import unify_address

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise "You must set BOT_TOKEN environment variable before start your bot"


def pong(chat_id):
    bot = Bot(BOT_TOKEN)
    bot.send_message(chat_id, "pong!")


def show_help(chat_id):
    bot = Bot(BOT_TOKEN)
    help_msg = '''
–ü—Ä–∏–≤–µ—Ç! –Ø –∂–∫—Ö –ø–æ–º–æ—â–Ω–∏–∫, —è –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –æ–±
—É–ø—Ä–∞–≤–ª—è—é—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ —Ç–≤–æ–µ–≥–æ –¥–æ–º–∞.

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∞–¥—Ä–µ—Å –¥–æ–º–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:
—É–ª. 50 –ª–µ—Ç –°–°–°–† –¥. 30–ê
–ò —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å —Ç–µ–±–µ –ø–æ–º–æ—á—å!
    '''
    bot.send_message(chat_id, help_msg)


def update_database(chat_id):
    bot = Bot(BOT_TOKEN)
    response_msg = "–ü—Ä–∏–Ω—è—Ç–æ, –æ–±–Ω–æ–≤–ª—è—é –±–∞–∑—É"
    bot.send_message(chat_id, response_msg)

    ydb_session = YDBSession()
    try:
        ydb_session.update_database_with_parser()
    except:
        response_msg = "–ü—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.\n"
        response_msg += "–ß—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –≤ —á—ë–º –ø—Ä–∏—á–∏–Ω–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ª–æ–≥–∞–º–∏.\n"
        response_msg += "–í–æ–∑–º–æ–∂–Ω–æ –∫–æ–Ω—á–∏–ª–∏—Å—å –ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã dadata.ru\n"
        bot.send_message(chat_id, response_msg)
        return

    response_msg = "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
    bot.send_message(chat_id, response_msg)


# address_row - string we get after YDB SELECT request
# There are all fields of SELECT element
def get_filtered_house_info_answer(ydb_row):
    wanted_fields = [
        "–∞–¥—Ä–µ—Å",
        "–≥–æ–¥",
        "—ç—Ç–∞–∂–µ–π"
    ]
    result = "üè† –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–º–µ:\n\n"

    additional_info = json.loads(ydb_row["additional_info"])

    # –ò—â–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –Ω—É–∂–Ω—ã–µ –Ω–∞–º –∫–ª—é—á–∏
    # –µ—Å–ª–∏ –Ω–∞—à–ª–∏ - –¥–æ–±–∞–≤–ª—è–µ–º
    for wanted in wanted_fields:
        for info_key in additional_info.keys():
            if wanted in info_key.lower():
                result += '*' + info_key + '*: ' + additional_info[info_key] + '\n'

    return result


def get_filtered_company_info_str(ydb_row):
    wanted_fields = [
        "–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ",
        "–∞–¥—Ä–µ—Å",
        "–≥–æ–¥",
        "—Ñ–∏–æ",
        "—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å",
        "–∫–æ–¥",
        "–Ω–æ–º–µ—Ä",
        "—Ç–µ–ª–µ—Ñ–æ–Ω"
    ]
    result = "üè¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É–ø—Ä–∞–≤–ª—è—é—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:\n\n"

    additional_info = json.loads(ydb_row["additional_info"])

    for wanted in wanted_fields:
        for info_key in additional_info.keys():
            if wanted in info_key.lower():
                result += '*' + info_key + '*: ' + additional_info[info_key] + '\n'

    return result


def provide_address_info_to_user(chat_id, text):
    ydb_session = YDBSession()
    # DEBUG BOT
    bot = Bot(BOT_TOKEN)

    user_query = unify_address("–ö–∞—Å–∏–º–æ–≤ " + text, False)
    house_answer = ydb_session.search_in_database("houses", user_query)
    user_info = ydb_session.search_in_database("users", chat_id)

    if user_info[0].rows:
        bot.send_message(chat_id, "DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω")
        paid_requests_count = user_info[0].rows[0]['paid_requests_count']
        user_date = user_info[0].rows[0]['date']

        if user_date == str(date.today()):
            if paid_requests_count > 0:
                paid_requests_count -= 1
                user_info = {'chat_id': chat_id, 'date': str(date.today()), 'paid_requests_count': paid_requests_count}
                ydb_session._write_db_user(user_info)
                bot.send_message(chat_id, "DEBUG: –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω. –û—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫ " + str(paid_requests_count))
                # –û—Ç —Å—é–¥–∞ –∏–¥—ë—Ç –Ω–µ –º–æ–π –∫–æ–¥.
                # If address exists (search result (rows) is not empty):
                #   get filtered and formatted info about the house
                # If address has company (first_row["company_name"] is not None)
                #   get filtered and formatted info about the company also
                if house_answer[0].rows:
                    answer = get_filtered_house_info_answer(house_answer[0].rows[0])
                    if house_answer[0].rows[0]["company_name"]:
                        company_name = house_answer[0].rows[0]["company_name"]
                        company_answer = ydb_session.search_in_database("companies", company_name)
                        if company_answer[0].rows:
                            answer += '\n' + get_filtered_company_info_str(company_answer[0].rows[0])
                    else:
                        answer += "\n\nüè¢ –£–ø—Ä–∞–≤–ª—è—é—â–∞—è –∫–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                else:
                    answer = "–Ø –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –≤–∞—à –∞–¥—Ä–µ—Å –≤ —Å–≤–æ–µ–π –±–∞–∑–µ.\n"
                    answer += "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å\n"
                    answer += "–ï—Å–ª–∏ –≤–∞–º –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Ç–æ "
                    answer += "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º @–ê–¥–º–∏–Ω\n"

                bot = Bot(BOT_TOKEN)
                bot.send_message(chat_id, answer, parse_mode="Markdown")
            else:
                bot.send_message(chat_id, "DEBUG: –í–∞—à–∏ –ø–æ–ø—ã—Ç–∫–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å")
        else:
            user_info = {'chat_id': chat_id, 'date': str(date.today()), 'paid_requests_count': 10}
            ydb_session._write_db_user(user_info)
            bot.send_message(chat_id, "DEBUG: –¢—ã —É—Å—Ç–∞—Ä–µ–ª, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–±—è, —Ç–µ–ø–µ—Ä—å —É —Ç–µ–±—è 10 –ø–æ–ø—ã—Ç–æ–∫")
    else:
        user_info = {'chat_id': chat_id, 'date': str(date.today()), 'paid_requests_count': 10}
        ydb_session._write_db_user(user_info)
        bot.send_message(chat_id, "DEBUG: –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–æ –º—ã –µ–≥–æ –∑–∞–ø–∏—à–µ–º. –¢–≤–æ–π ID " + str(chat_id))
        provide_address_info_to_user(chat_id, text)

# Main command handler for tasks above
def solve_task(chat_id, text):
    if "/ping" in text:
        pong(chat_id)
    elif "/help" in text:
        show_help(chat_id)
    elif "/update" in text:
        update_database(chat_id)
    else:
        provide_address_info_to_user(chat_id, text)
